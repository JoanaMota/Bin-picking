/*
 *  commitmove.c
 *  hello
 *
 *  Created by Aron Allen on 31/7/09.
 *  Copyright 2009 __MyCompanyName__. All rights reserved.
 *
 */
#include <stdio.h>
#include <stdint.h>
#include "../include/main.h"



void makeMove(int moveNumber, PGAME game,int n){	
	if ((*game).mjCount == 0 || moveNumber > (*game).mjCount){
		printf("error, movecount:%d passedmove%d, making random move instead\n",(*game).mjCount,moveNumber);

		if ((*game).mjCount) {
			moveNumber = rand()%(*game).mjCount;

		}else {
			printf("no moves\n");
		}


	}
	
	BITBOARD origin = (*game).mjs[moveNumber].intermediates[0];
	BITBOARD destination = (*game).mjs[moveNumber].intermediates[1];

/*	printf("origin====%i",origin);*/
/*	printf("destination=====%i",destination );*/


	
	
	BITBOARD move = origin | destination;
	
/*	typedef uint32_t bboard;*/

/*	// Accessing a square of the bitboard*/
/*	int*/
/*	get (bboard b, int square)*/
/*	{*/
/*	  return (b & (1ULL << square));*/
/*	}*/

/*	int i, j, square;*/

/*	for (i = 7; i >= 0; i--) // rank => top to bottom*/
/*	    {*/
/*	      for (j = 0; j < 4; j++) // file => left to right*/
/*		printf ("%d ", get (move, j+8*i) ? 1 : 0);*/
/*	      printf ("\n");*/
/*	    }*/
/*		*/




/*	int test_array[32]; ///teste!*/
/*	int i;*/

/*	for(i = 0; i < 32; i++){*/
/*		test_array[i] = 0;*/
/*	}*/
/*//teste!*/



	if(n == 1 && (*game).turn == ~(player)){
		destino = printBitboard(destination);
		printf("destino\n");
		printf("%d \n", destino);
/*		test_array[destination] = 1;//teste*/
/*		printf("%d\n", test_array[destination]);//teste*/
/*		BITBOARD test_bitboard = arrayToBitboard(test_array);//teste*/
/*		printBitboard(test_bitboard);//teste*/
/*		printBitboard(bitboardForRealPosition);//teste*/
		origem = printBitboard(origin);
		printf("origem\n");
		printf("%d \n", origem);

	
		printf ("\n");
	}


	
	      
	if ((*game).turn == 'w'){
					
		if ((*game).kings & origin & (*game).white){
			(*game).kings = (*game).kings ^ move;
		}
		(*game).white = (*game).white ^ move;
		
	
	}
				
	if ((*game).turn == 'b'){
		
		if ((*game).kings & origin & (*game).black){
			(*game).kings = (*game).kings ^ move;
		}
		(*game).black = (*game).black ^ move;
	}
	
	(*game).notOccupied = ~((*game).black|(*game).white);
	return;
}
