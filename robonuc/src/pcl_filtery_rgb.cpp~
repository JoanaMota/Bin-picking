#include <ros/ros.h>










class cloudHandler
{
public:
    cloudHandler()
    {
        pcl_sub = nh.subscribe("/camera/depth_registered/points", 10, &cloudHandler::cloudCB, this);
        pcl_pub = nh.advertise<sensor_msgs::PointCloud2>("pcl_filtredy_rgb", 1);
    }

    void cloudCB(const sensor_msgs::PointCloud2 &input)
    {
        pcl::PointCloud<pcl::PointXYZRGB> cloud;
        pcl::PointCloud<pcl::PointXYZRGB> cloud_filtred;

        pcl::fromROSMsg(input, cloud);

        
 		 // Create the filtering object
		 pcl::PassThrough<pcl::PointXYZRGB> pass;
		 pass.setInputCloud (cloud.makeShared());
		 pass.setFilterFieldName ("y");
		 pass.setFilterLimits (-0.25, 2.0);
		 pass.setNegative(false);
		 pass.filter (cloud_filtred);
		 

        //Publish the new cloud
        sensor_msgs::PointCloud2 output;
        pcl::toROSMsg(cloud_filtred, output);
        pcl_pub.publish(output);
    }

protected:
    ros::NodeHandle nh;
    ros::Subscriber pcl_sub;
    ros::Publisher pcl_pub, ind_pub, coef_pub;
};

main(int argc, char **argv)
{
    ros::init(argc, argv, "imagem2d_");

    cloudHandler handler;

    ros::spin();

    return 0;
}


