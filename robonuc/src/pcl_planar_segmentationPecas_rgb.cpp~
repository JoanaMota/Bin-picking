#include <ros/ros.h>
#include <pcl/point_cloud.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/filters/extract_indices.h>
#include <sensor_msgs/PointCloud2.h>
#include <iostream>
#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>

#include <ros/ros.h>
#include <sensor_msgs/PointCloud2.h>
// PCL specific includes
#include <pcl/ros/conversions.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/radius_outlier_removal.h>

#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/project_inliers.h>
#include <pcl/visualization/cloud_viewer.h>

int cont=0;
class cloudHandler
{
public:
    cloudHandler()
    {
        pcl_sub = nh.subscribe("segmented_tabuleiro", 10, &cloudHandler::cloudCB, this);
        pcl_pub = nh.advertise<sensor_msgs::PointCloud2>("segmented_Pecas", 1);
        ind_pub = nh.advertise<pcl_msgs::PointIndices>("point_indices", 1);
        coef_pub = nh.advertise<pcl_msgs::ModelCoefficients>("planar_coef", 1);
    }

    void cloudCB(const sensor_msgs::PointCloud2 &input)
    {
        pcl::PointCloud<pcl::PointXYZRGB> cloud;
        pcl::PointCloud<pcl::PointXYZRGB> cloud_segmented;

        pcl::fromROSMsg(input, cloud);
        
        	pcl::PointCloud<pcl::PointXYZRGB>::Ptr planePoints(new pcl::PointCloud<pcl::PointXYZRGB>);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr projectedPoints(new pcl::PointCloud<pcl::PointXYZRGB>);
		pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloudNoPlane(new pcl::PointCloud<pcl::PointXYZRGB>);

//        pcl::ModelCoefficients coefficients;
        pcl::PointIndices::Ptr outliers(new pcl::PointIndices());

	pcl::ModelCoefficients::Ptr coefficients(new pcl::ModelCoefficients);
        // Create the segmentation object
        pcl::SACSegmentation<pcl::PointXYZRGB> segmentation;
        segmentation.setModelType(pcl::SACMODEL_PLANE);
        segmentation.setMethodType(pcl::SAC_RANSAC);
        segmentation.setMaxIterations(1000);
        segmentation.setDistanceThreshold(0.010);
        	segmentation.setOptimizeCoefficients(true);
        segmentation.setInputCloud(cloud.makeShared());
        segmentation.segment(*outliers, *coefficients);
        
        if (outliers->indices.size() == 0)
		std::cout << "Could not find a plane in the scene." << std::endl;
	else
	{
		std::cerr << "Plane coefficients: " << coefficients->values[0] << " "
				  << coefficients->values[1] << " "
				  << coefficients->values[2] << " "
				  << coefficients->values[3] << std::endl;
 
		// Create a second point cloud that does not have the plane points.
		// Also, extract the plane points to visualize them later.
		pcl::ExtractIndices<pcl::PointXYZRGB> extract;
		extract.setInputCloud(cloud.makeShared());
		extract.setIndices(outliers);
		extract.filter(*planePoints);
		extract.setNegative(true);
		extract.filter(*cloudNoPlane);
 
		// Object for projecting points onto a model.
		pcl::ProjectInliers<pcl::PointXYZRGB> projection;
		// We have to specify what model we used.
		projection.setModelType(pcl::SACMODEL_PLANE);
		projection.setInputCloud(cloudNoPlane);
		// And we have to give the coefficients we got.
		projection.setModelCoefficients(coefficients);
		projection.filter(*projectedPoints);


		// Visualize everything.
//		pcl::visualization::CloudViewer viewerPlane("Plane");
//		viewerPlane.showCloud(planePoints);
//		while (!viewerPlane.wasStopped())
//		{
//			// Do nothing but wait.
//		}
//		pcl::visualization::CloudViewer viewerProjection("Projected points");
//		viewerProjection.showCloud(projectedPoints);
//		while (!viewerProjection.wasStopped())
//		{
//			// Do nothing but wait.
//		}
	}

//        // Publish the model coefficients
//        pcl_msgs::ModelCoefficients ros_coefficients;
//        pcl_conversions::fromPCL(coefficients, ros_coefficients);
//        coef_pub.publish(ros_coefficients);

        // Publish the Point Indices
//        pcl_msgs::PointIndices ros_inliers;
//        pcl_conversions::fromPCL(*outliers, ros_inliers);
//        ind_pub.publish(ros_inliers);



        // Create the filtering object
        pcl::ExtractIndices<pcl::PointXYZRGB> extract;
        extract.setInputCloud(cloud.makeShared());
        extract.setIndices(outliers);
        extract.setNegative(true);
        extract.filter(cloud_segmented);


        
        //Publish the new cloud
        sensor_msgs::PointCloud2 output;
        pcl::toROSMsg(projectedPoints, output);
        pcl_pub.publish(output);
//        std::cout<<"passei aqui";

    }

protected:
    ros::NodeHandle nh;
    ros::Subscriber pcl_sub;
    ros::Publisher pcl_pub, ind_pub, coef_pub;
};

main(int argc, char **argv)
{
    ros::init(argc, argv, "pcl_planar_segmentationPecas");

    cloudHandler handler;

    ros::spin();

    return 0;
}


