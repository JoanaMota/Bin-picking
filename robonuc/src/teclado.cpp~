#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv/cvwimage.h>
#include <opencv/highgui.h>
#include <cv_bridge/cv_bridge.h>
//////// rosrun dynamic_reconfigure dynparam set /camera/driver data_skip 55
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include "sensor_msgs/Image.h"
#include "image_transport/image_transport.h"
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv2/opencv.hpp>
#include <iostream>
#include <tf_conversions/tf_eigen.h>
#include <iostream>
#include <opencv2/opencv.hpp>
#include <iostream>
#include <string>
#include <vector>
#include <iostream>
#include <math.h>
#include "std_msgs/String.h"

#include <stdio.h>
#include <stdlib.h>

#include "ros/ros.h"

#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include <std_msgs/Int8.h>

#include	<iostream>
#include	"damas_hsv/Path_Posit.h"
#include	"damas_hsv/conjunto.h"
#include	<iostream>
#include	<sstream>
#include <Eigen/Dense>
#include <ros/callback_queue.h>


int main(int argc, char **argv)
{
  ros::init(argc, argv, "talker");

  ros::NodeHandle n;

  ros::Publisher chatter_pub = n.advertise<std_msgs::Int8>("chatter", 1000);

//  ros::Rate loop_rate(10);

  int count;
  while (ros::ok())
  {
	cin.ignore();
    std_msgs::Int8 msg;
	msg.data = 1;


    chatter_pub.publish(msg);
	

  }


  return 0;
}
